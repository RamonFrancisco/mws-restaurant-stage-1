{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","fetchRestaurantFromURL","callback","self","id","DBHelper","fetchRestaurantById","error","getParameterByName","fillRestaurantHTML","console","arguments","length","undefined","getElementById","name","document","innerHTML","address","image","className","alt","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","operatingHours","hours","key","fillReviewsHTML","createElement","day","row","appendChild","time","reviews","title","classList","add","container","noReviews","createReviewHTML","review","ul","li","reviewHeader","reviewContent","date","rating","comments","breadcrumb","querySelector","setAttribute","url","replace","results","RegExp","concat","exec","decodeURIComponent","location","window","initMap","google","maps","Map","center","latlng","scrollwheel","mapMarkerForRestaurant"],"mappings":"aAAA,IAAIA,WACAC,IAwBJ,SAASC,uBAAuBC,GAC5B,GAAIC,KAAKJ,WACLG,EAAS,KAAMC,KAAKJ,gBADxB,CAAA,IAAQK,EAACL,mBAAY,MAAEK,EASnBC,SAASC,oBAAoBF,EAAI,SAACG,EAAOR,IALlCS,KAAAA,WAAmBT,IAGlBU,qBACLP,EAAA,KAAAH,IAHEW,QAAAH,MAAAA,MAJLL,MAAS,0BACTA,EAAAK,MAAA,QAsBR,SAASE,qBAAiD,IAA9BV,EAA8B,EAAAY,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBR,KAAKJ,WATlCU,SAAkBK,eAAA,mBAClBZ,UAAeH,EAAfgB,KAEPC,SAAAF,eAAA,sBACJG,UAAAlB,EAAAmB,QAYG,IAAMC,EAAQH,SAASF,eAAe,kBACtCK,EAAMC,UAAY,iBAClBD,EAAME,IAAMtB,EAAWgB,KACvBI,EAAMG,IAAMjB,SAASkB,sBAAsBxB,GAVWiB,SAAAF,eAAA,sBAC5CG,UAAYH,EAAAA,aAItBI,EAAAM,iBAEML,0BAGNA,kBAQC,SACDM,0BAAA,IAAAC,EAAA,EAAAf,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAR,KAAAJ,WAAAyB,gBAQMG,EAAQX,SAASF,eAAe,oBACtC,IAAK,IAAIc,KAAOF,EAAgB,CARhCG,IAAAA,EAAeb,SAAAc,cAAA,MAGnBC,EAAAf,SAAAc,cAAA,MASQC,EAAId,UAAYW,EAChBI,EAAIC,YAAYF,GAEhB,IAAMG,EAAOlB,SAASc,cAAc,MAT5CI,EAAST,UAAAA,EAA0EG,GAAlDF,EAAAA,YAAkDQ,GAa3EP,EAAMM,YAAYD,IAHlBE,SAAKjB,kBAAL,IAAiBS,EAAjB,EAAAf,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA+BR,KAA/BJ,WAAAoC,QACIF,EAAYC,SAAhBpB,eAAA,qBAEMmB,EAAAA,SAANH,cAAA,MAcJ,GAbCM,EAAAC,UAAAC,IAAA,gBACJF,EAAAnB,UAAA,UAEDsB,EAAAN,YAAAG,IAUSD,EAAS,CACV,IAAMK,EAAYxB,SAASc,cAAc,KARxBK,OASjBK,EAAUvB,UAAY,uBAT9BsB,EAASV,YAAmDW,GAExD,IAAMJ,EAAQpB,SAASc,eAAc,gBACrCM,EAAMC,QAAUC,SAAAA,GACVrB,EAAAA,YAAYwB,iBAAlBC,MAaAH,EAAUN,YAAYU,GALrB,SAAAF,iBAAAC,GAYD,IAAME,EAAK5B,SAASc,cAAc,MAXlCc,EAAMD,UAAK3B,IAASF,eAEhB6B,IAAGV,EAAYQ,SAAAA,cAAf,OADJI,EAAAR,UAAAC,IAAA,iBAIH,IAAAQ,EAAA9B,SAAAc,cAAA,OAEDgB,EAAAT,UAAAC,IAAA,kBAaI,IAAMvB,EAAOC,SAASc,cAAc,KACpCf,EAAKsB,UAAUC,IAAI,QACnBvB,EAAKE,UAAYyB,EAAO3B,KAZ5B8B,EAASJ,YAAiBC,GAEpB,IAACL,EAAUC,SAAIR,cAAjB,KAEAiB,EAAMF,UAAYP,IAAGtB,QACrB6B,EAAAA,UAAaR,EAAbU,KAEAF,EAAMC,YAAgB9B,GACtB8B,EAAAA,OAAAA,GAGA/B,IAAKsB,EAAUC,SAAfR,cAAA,KACAf,EAAKE,UAAYyB,IAAM,UACvBG,EAAAA,UAAAA,WAAAA,OAAAH,EAAAM,QAEAF,EAAa9B,YAASc,GAEtBiB,IAAK9B,EAAYyB,SAAjBZ,cAAA,KAOAgB,OANAD,EAAAA,UAAaZ,IAAYc,YACvBE,EAAQJ,UAAVH,EAAAO,SAEAH,EAAe9B,YAASc,GACxBkB,EAAAA,OAAOX,GAEPS,EAQA,SAAOF,iBAAP,IAAA7C,EAAA,EAAAY,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAR,KAAAJ,WACHmD,EAAAlC,SAAAmC,cAAA,kBAEDP,EAAA5B,SAAAc,cAAA,MAMIc,EAAGQ,aAAa,eAAgB,QAChCR,EAAG3B,UAAYlB,EAAWgB,KAC1BmC,EAAWjB,YAAYW,GAFvBA,SAAGQ,mBAAarC,EAAgBsC,GAC7BpC,IACHiC,EAAAA,OAAWjB,SAAYW,MAC1B7B,EAAAA,EAAAuC,QAAA,UAAA,QAED,IAQIC,EARJ,IAAAC,OAAA,OAAAC,OAAA1C,EAAA,sBAQoB2C,KAAKL,GACrB,OAAKE,EAEAA,EAAQ,GAPbI,mBACaC,EAAb,GAAAN,QAAA,MAAA,MAFK9C,GAOE,KAzKXqD,OAAOC,QAAU,WACb7D,uBAAuB,SAACM,EAAOR,GAD5B+D,EACH7D,QAAAA,MAAuBM,IACNJ,KAAAH,IAAA,IAAA+D,OAAAC,KAAAC,IAAAjD,SAAAF,eAAA,OAAA,CACDP,KAAMA,GACX2D,OAAAnE,EAAAoE,OACHC,aAAsBJ,IAElBE,iBACAE,SAAaC,uBAAAlE,KAAAJ,WAAAI,KAAAH","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n/**\r\n* Initialize Google map, called from HTML.\r\n*/\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Get current restaurant from page URL.\r\n*/\r\nfunction fetchRestaurantFromURL(callback) {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n* Create restaurant HTML and add it to the webpage\r\n*/\r\nfunction fillRestaurantHTML(restaurant = self.restaurant) {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n    \r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n    \r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img';\r\n    image.alt = restaurant.name;\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    \r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n    \r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n* Create restaurant operating hours HTML table and add it to the webpage.\r\n*/\r\nfunction fillRestaurantHoursHTML(operatingHours = self.restaurant.operating_hours) {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n        \r\n        const day = document.createElement('td');\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n        \r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n        \r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n* Create all reviews HTML and add them to the webpage.\r\n*/\r\nfunction fillReviewsHTML(reviews = self.restaurant.reviews) {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h3');\r\n    title.classList.add('review-title')\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n    \r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n* Create review HTML and add it to the webpage.\r\n*/\r\nfunction createReviewHTML(review) {\r\n    const li = document.createElement('li');\r\n    li.classList.add('review-item');\r\n\r\n    const reviewHeader = document.createElement('div');\r\n    reviewHeader.classList.add('review-header');\r\n\r\n    const reviewContent = document.createElement('div');\r\n    reviewContent.classList.add('review-content');\r\n    \r\n    const name = document.createElement('p');\r\n    name.classList.add('name');\r\n    name.innerHTML = review.name;\r\n    reviewHeader.appendChild(name);\r\n    \r\n    const date = document.createElement('p');\r\n    date.classList.add('date');\r\n    date.innerHTML = review.date;\r\n    reviewHeader.appendChild(date);\r\n    li.append(reviewHeader);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.classList.add('rating');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    reviewContent.appendChild(rating);\r\n    \r\n    const comments = document.createElement('p');\r\n    comments.classList.add('comments');\r\n    comments.innerHTML = review.comments;\r\n    reviewContent.appendChild(comments);\r\n    li.append(reviewContent);\r\n    \r\n    return li;\r\n}\r\n\r\n/**\r\n* Add restaurant name to the breadcrumb navigation menu\r\n*/\r\nfunction fillBreadcrumb(restaurant=self.restaurant) {\r\n    const breadcrumb = document.querySelector('.breadcrumb ul');\r\n    const li = document.createElement('li');\r\n    li.setAttribute('aria-current', 'page');\r\n    li.innerHTML = restaurant.name;\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n* Get a parameter by name from page URL.\r\n*/\r\nfunction getParameterByName(name, url) {\r\n    if (!url)\r\n    url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n    if (!results)\r\n    return null;\r\n    if (!results[2])\r\n    return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}