{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","registerServiceWorker","navigator","register","console","err","then","log","catch","fillNeighborhoodsHTML","arguments","length","undefined","getElementById","neighborhood","forEach","createElement","option","innerHTML","DBHelper","error","self","fillCuisinesHTML","select","cuisine","window","initMap","lat","google","maps","Map","lng","center","updateRestaurants","cSelect","nSelect","selectedIndex","cIndex","nIndex","value","fillRestaurantsHTML","resetRestaurants","ul","m","setMap","restaurant","append","createRestaurantHTML","addMarkersToMap","li","classList","add","image","className","name","imageUrlForRestaurant","address","more","href","urlForRestaurant","mapMarkerForRestaurant","location","marker","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\nneighborhoods,\r\ncuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n* Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n*/\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\tfetchNeighborhoods();\r\n\tfetchCuisines();\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n\tregisterServiceWorker();\r\n});\r\n\r\n// Register Service Worker\r\nconst registerServiceWorker = () => {\r\n\tif (!navigator.serviceWorker) return;\r\n\r\n\tnavigator.serviceWorker.register('./sw.js')\r\n\t.then(register => console.log(register))\r\n\t.catch(err => console.log(err));\r\n};\r\n\r\n/**\r\n* Set neighborhoods HTML.\r\n*/\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n\tconst select = document.getElementById('neighborhoods-select');\r\n\tneighborhoods.forEach(neighborhood => {\r\n\t\tconst option = document.createElement('option');\r\n\t\toption.innerHTML = neighborhood;\r\n\t\toption.value = neighborhood;\r\n\t\tselect.append(option);\r\n\t});\r\n}\r\n\r\n/**\r\n* Fetch all neighborhoods and set their HTML.\r\n*/\r\nconst fetchNeighborhoods = () => {\r\n\tDBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n\t\tif (error) { // Got an error\r\n\t\t\tconsole.error(error);\r\n\t\t} else {\r\n\t\t\tself.neighborhoods = neighborhoods;\r\n\t\t\tfillNeighborhoodsHTML();\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n* Fetch all cuisines and set their HTML.\r\n*/\r\nconst fetchCuisines = () => {\r\n\tDBHelper.fetchCuisines((error, cuisines) => {\r\n\t\tif (error) { // Got an error!\r\n\t\t\tconsole.error(error);\r\n\t\t} else {\r\n\t\t\tself.cuisines = cuisines;\r\n\t\t\tfillCuisinesHTML();\r\n\t\t}\r\n\t});\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n* Set cuisines HTML.\r\n*/\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n\tconst select = document.getElementById('cuisines-select');\r\n\t\r\n\tcuisines.forEach(cuisine => {\r\n\t\tconst option = document.createElement('option');\r\n\t\toption.innerHTML = cuisine;\r\n\t\toption.value = cuisine;\r\n\t\tselect.append(option);\r\n\t});\r\n}\r\n\r\n/**\r\n* Initialize Google map, called from HTML.\r\n*/\r\nwindow.initMap = () => {\r\n\tlet loc = {\r\n\t\tlat: 40.722216,\r\n\t\tlng: -73.987501\r\n\t};\r\n\tself.map = new google.maps.Map(document.getElementById('map'), {\r\n\t\tzoom: 12,\r\n\t\tcenter: loc,\r\n\t\tscrollwheel: false\r\n\t});\r\n\tupdateRestaurants();\r\n}\r\n\r\n/**\r\n* Update page and map for current restaurants.\r\n*/\r\nconst updateRestaurants = () => {\r\n\tconst cSelect = document.getElementById('cuisines-select');\r\n\tconst nSelect = document.getElementById('neighborhoods-select');\r\n\t\r\n\tconst cIndex = cSelect.selectedIndex;\r\n\tconst nIndex = nSelect.selectedIndex;\r\n\t\r\n\tconst cuisine = cSelect[cIndex].value;\r\n\tconst neighborhood = nSelect[nIndex].value;\r\n\t\r\n\tDBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n\t\tif (error) { // Got an error!\r\n\t\t\tconsole.error(error);\r\n\t\t} else {\r\n\t\t\tresetRestaurants(restaurants);\r\n\t\t\tfillRestaurantsHTML();\r\n\t\t}\r\n\t})\r\n}\r\n\r\n/**\r\n* Clear current restaurants, their HTML and remove their map markers.\r\n*/\r\nconst resetRestaurants = (restaurants) => {\r\n\t// Remove all restaurants\r\n\tself.restaurants = [];\r\n\tconst ul = document.getElementById('restaurants-list');\r\n\tul.innerHTML = '';\r\n\t\r\n\t// Remove all map markers\r\n\tself.markers.forEach(m => m.setMap(null));\r\n\tself.markers = [];\r\n\tself.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n* Create all restaurants HTML and add them to the webpage.\r\n*/\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n\tconst ul = document.getElementById('restaurants-list');\r\n\trestaurants.forEach(restaurant => {\r\n\t\tul.append(createRestaurantHTML(restaurant));\r\n\t});\r\n\taddMarkersToMap();\r\n}\r\n\r\n/**\r\n* Create restaurant HTML.\r\n*/\r\nfunction createRestaurantHTML (restaurant) {\r\n    console.log(restaurant);\r\n    const li = document.createElement('li');\r\n    li.classList.add('restaurant-item');\r\n\t\r\n\tconst image = document.createElement('img');\r\n\timage.className = 'restaurant-img';\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.alt = restaurant.name;\r\n\tli.append(image);\r\n\t\r\n    const name = document.createElement('h3');\r\n    name.className = 'restaurant-name';\r\n\tname.innerHTML = restaurant.name;\r\n\tli.append(name);\r\n\t\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.className = 'restaurant-text';\r\n\tneighborhood.innerHTML = restaurant.neighborhood;\r\n\tli.append(neighborhood);\r\n\t\r\n    const address = document.createElement('p');\r\n    address.className = 'restaurant-text';\r\n\taddress.innerHTML = restaurant.address;\r\n\tli.append(address);\r\n\t\r\n    const more = document.createElement('a');\r\n    more.classList.add('restaurant-more');\r\n\tmore.innerHTML = 'View Details';\r\n\tmore.href = DBHelper.urlForRestaurant(restaurant);\r\n\tli.append(more)\r\n\t\r\n\treturn li\r\n}\r\n\r\n/**\r\n* Add markers for current restaurants to the map.\r\n*/\r\nfunction addMarkersToMap(restaurants = self.restaurants) {\r\n\trestaurants.forEach(restaurant => {\r\n\t\t// Add marker to the map\r\n\t\tconst marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n\t\tgoogle.maps.event.addListener(marker, 'click', () => {\r\n\t\t\twindow.location.href = marker.url\r\n\t\t});\r\n\t\tself.markers.push(marker);\r\n\t});\r\n}\r\n"]}